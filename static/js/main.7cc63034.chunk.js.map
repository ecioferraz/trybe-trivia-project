{"version":3,"sources":["trivia.png","services/fetchAPI.js","actions/index.js","services/util.js","pages/Login.jsx","components/Header.jsx","components/Loading.jsx","pages/Jogo.jsx","pages/Settings.jsx","pages/Feedback.jsx","pages/Ranking.jsx","serviceWorker.js","reducers/login.js","reducers/token.js","reducers/questions.js","reducers/score.js","reducers/index.js","store/index.js","index.js","App.js"],"names":["module","exports","fetchAPI","url","fetch","then","response","json","ok","Promise","resolve","reject","getScore","score","type","payload","getToken","token","getQuestions","questions","writeLocalStorage","key","data","localStorage","setItem","JSON","stringify","readLocalStorage","parse","getItem","updateLocalStorage","name","attr","player","Login","props","state","email","click","handleChange","bind","handleSubmit","target","value","this","setState","event","preventDefault","sendToken","login","assertions","gravatarEmail","onSubmit","className","src","logo","alt","htmlFor","data-testid","onChange","disabled","to","hidden","href","Component","connect","dispatch","loginAction","a","async","Header","userEmail","md5","toString","user","Loading","Jogo","isLoading","currQuestion","clicked","timer","loadQuestions","changeQuestion","concatAnswers","startCronometer","setClass","checkAnswer","setScore","_prevProps","prevState","clearInterval","cronometerInterval","endTimer","e","dataset","testid","difficulty","answer","points","sendScore","setInterval","history","ranking","picture","push","correct","incorrect","sort","onClick","options","correct_answer","incorrect_answers","category","question","map","index","button","QUESTIONS_URL","results","Settings","Feedback","feedbackMessage","zerar","ponto","Ranking","players","b","Boolean","window","location","hostname","match","INITIAL_STATE","image","rootReducer","combineReducers","action","store","createStore","composeWithDevTools","applyMiddleware","reduxThunk","Cypress","ReactDOM","render","exact","path","component","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.7cc63034.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/trivia.466d153e.png\";","const fetchAPI = (url) => (\n  fetch(url)\n    .then((response) => (\n      response\n        .json()\n        .then((json) => (response.ok ? Promise.resolve(json) : Promise.reject(json)))\n    ))\n);\n\nexport default fetchAPI;\n","import fetchAPI from '../services/fetchAPI';\n\nexport const USER_NAME = 'USER_NAME';\nexport const LOGIN = 'LOGIN';\nexport const GET_TOKEN = 'GET_TOKEN';\nexport const GET_QUESTIONS = 'GET_QUESTIONS';\nexport const GET_GRAVATAR = 'GET_GRAVATAR';\nexport const GET_SCORE = 'GET_SCORE';\n\nexport const login = (email, name) => ({\n  type: LOGIN,\n  payload: { email, name },\n});\n\nexport const getGravatar = (image) => ({\n  type: GET_GRAVATAR,\n  payload: image,\n});\n\nexport const getScore = (score) => ({\n  type: GET_SCORE,\n  payload: {\n    score,\n  },\n});\n\nconst getToken = (token) => ({\n  type: GET_TOKEN,\n  payload: { token },\n});\n\nconst getQuestions = (questions) => ({\n  type: GET_QUESTIONS,\n  payload: { questions },\n});\n\nexport const getTokenThunk = () => async (dispatch) => {\n  const TOKEN_URL = 'https://opentdb.com/api_token.php?command=request';\n  const { token } = await fetchAPI(TOKEN_URL);\n\n  localStorage.setItem('token', token);\n\n  dispatch(getToken(token));\n};\n\nexport const getQuestionsThunk = () => async (dispatch) => {\n  const token = localStorage.getItem('token');\n  const QUESTIONS_URL = `https://opentdb.com/api.php?amount=5&token=${token}`;\n  const response = await fetchAPI(QUESTIONS_URL);\n  const questions = response.results;\n  dispatch(getQuestions(questions));\n};\n","export function writeLocalStorage(key, data) {\n  localStorage.setItem(key, JSON.stringify(data));\n}\n\nexport function readLocalStorage(key) {\n  const response = JSON.parse(localStorage.getItem(key));\n  return response;\n}\n\nexport function updateLocalStorage(name, attr) {\n  const state = readLocalStorage('state');\n  const { player } = state;\n  const newState = {\n    player: {\n      ...player,\n      [name]: attr,\n    },\n\n  };\n  writeLocalStorage('state', newState);\n}\n","import PropTypes from 'prop-types';\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { Link, Redirect } from 'react-router-dom';\nimport { getTokenThunk, login as loginAction } from '../actions';\nimport { writeLocalStorage } from '../services/util';\nimport '../style/login.css';\nimport logo from '../trivia.png';\n\nclass Login extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      email: '',\n      name: '',\n      click: false,\n    };\n    this.handleChange = this.handleChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n\n  handleChange({ target: { name, value } }) {\n    this.setState({ [name]: value });\n  }\n\n  handleSubmit(event) {\n    event.preventDefault();\n    const { email, name } = this.state;\n    const { sendToken, login } = this.props;\n    const state = {\n      player: {\n        name,\n        assertions: 0,\n        score: 0,\n        gravatarEmail: email,\n      },\n    };\n    writeLocalStorage('state', state);\n    login(email, name);\n\n    sendToken();\n    this.setState({ click: true });\n  }\n\n  render() {\n    const { email, name, click } = this.state;\n    const { token } = this.props;\n    return (\n      <form onSubmit={ this.handleSubmit } className=\"login\">\n        <fieldset className=\"formContainer\">\n          <img src={ logo } alt=\"Trivia\" className=\"formContainer__logo\" />\n          <label htmlFor=\"email\" className=\"formEmail\">\n            {'Email: '}\n            <input\n              className=\"emailInput\"\n              data-testid=\"input-gravatar-email\"\n              name=\"email\"\n              onChange={ this.handleChange }\n              type=\"email\"\n              value={ email }\n            />\n          </label>\n          <label htmlFor=\"name\" className=\"formName\">\n            {'Nome: '}\n            <input\n              className=\"nameInput\"\n              data-testid=\"input-player-name\"\n              name=\"name\"\n              onChange={ this.handleChange }\n              value={ name }\n            />\n          </label>\n          <button\n            className=\"playBtn\"\n            type=\"submit\"\n            data-testid=\"btn-play\"\n            disabled={ !(email && name) }\n          >\n            Jogar\n          </button>\n          <Link to=\"/settings\">\n            <button\n              type=\"button\"\n              data-testid=\"btn-settings\"\n              className=\"configBtn\"\n              hidden\n            >\n              Configurações\n            </button>\n          </Link>\n          { click && token && <Redirect to=\"/trybe-trivia-project/jogo\" /> }\n        </fieldset>\n        <footer className=\"image-credit\">Background image credit: <a href=\"https://www.reddit.com/user/higgsas\">higgsas</a></footer>\n      </form>\n    );\n  }\n}\n\nconst mapDispatchToProps = (dispatch) => ({\n  login: (email, name) => dispatch(loginAction(email, name)),\n  sendToken: () => dispatch(getTokenThunk()),\n});\n\nconst mapStateToProps = ({ token: { token } }) => ({ token });\n\nLogin.propTypes = {\n  token: PropTypes.string.isRequired,\n  sendToken: PropTypes.func.isRequired,\n  login: PropTypes.func.isRequired,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Login);\n","import PropTypes from 'prop-types';\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport md5 from 'crypto-js/md5';\nimport '../style/header.css';\nimport logo from '../trivia.png';\n\nclass Header extends Component {\n  render() {\n    const { name, score, email } = this.props;\n    const userEmail = md5(email).toString();\n    return (\n      <header>\n        <div className=\"image-container\">\n          <img src={ logo } alt=\"logo\" />\n        </div>\n        <div className=\"user-info\">\n          <img src={ `https://www.gravatar.com/avatar/${userEmail}` } data-testid=\"header-profile-picture\" alt=\"gravatar\" />\n          <p data-testid=\"header-player-name\">{ name }</p>\n          <p data-testid=\"header-score\">{ `Pontos: ${ score }` }</p>\n        </div>\n      </header>\n    );\n  }\n}\n\nHeader.propTypes = {\n  email: PropTypes.string.isRequired,\n  name: PropTypes.string.isRequired,\n  score: PropTypes.number.isRequired,\n};\n\nconst mapStateToProps = ({ user: { name, email }, score: { score } }) => ({\n  name,\n  email,\n  score,\n});\n\nexport default connect(mapStateToProps)(Header);\n","import React, { Component } from 'react';\nimport '../style/loading.css';\n\nexport default class Loading extends Component {\n  render() {\n    return (\n      <div className=\"loading\">\n        <span>Carregando...</span>\n      </div>\n    );\n  }\n}\n","/* eslint-disable max-lines-per-function */\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport md5 from 'crypto-js/md5';\nimport Header from '../components/Header';\nimport { getQuestionsThunk, getScore } from '../actions';\nimport { readLocalStorage,\n  writeLocalStorage, updateLocalStorage } from '../services/util';\nimport Loading from '../components/Loading';\nimport '../style/jogo.css';\n\nclass Jogo extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      isLoading: true,\n      currQuestion: 0,\n      clicked: false,\n      timer: 30,\n      assertions: 0,\n      score: 0,\n    };\n    this.loadQuestions = this.loadQuestions.bind(this);\n    this.changeQuestion = this.changeQuestion.bind(this);\n    this.concatAnswers = this.concatAnswers.bind(this);\n    this.startCronometer = this.startCronometer.bind(this);\n    this.setClass = this.setClass.bind(this);\n    this.checkAnswer = this.checkAnswer.bind(this);\n    this.setScore = this.setScore.bind(this);\n  }\n\n  componentDidMount() {\n    this.loadQuestions();\n    this.startCronometer();\n  }\n\n  componentDidUpdate(_prevProps, prevState) {\n    const MAX_SECONDS = 0;\n\n    if (prevState.timer === MAX_SECONDS) {\n      clearInterval(this.cronometerInterval);\n      this.endTimer();\n    }\n  }\n\n  async setClass(e) {\n    clearInterval(this.cronometerInterval);\n    this.setState((prevState) => ({\n      ...prevState,\n      clicked: true,\n      timer: prevState.timer,\n    }));\n    this.checkAnswer(e.target.dataset.testid);\n  }\n\n  setScore() {\n    const { questions } = this.props;\n    const { currQuestion, timer } = this.state;\n    const HARD = 3;\n    const MEDIUM = 2;\n    const EASY = 1;\n    const BASE = 10;\n    if (questions[currQuestion].difficulty === 'hard') {\n      return BASE + (timer * HARD);\n    }\n    if (questions[currQuestion].difficulty === 'medium') {\n      return BASE + (timer * MEDIUM);\n    }\n    if (questions[currQuestion].difficulty === 'easy') {\n      return BASE + (timer * EASY);\n    }\n  }\n\n  async checkAnswer(answer) {\n    const points = this.setScore();\n    if (answer === 'correct-answer') {\n      await this.setState((prevState) => ({\n        ...prevState,\n        assertions: prevState.assertions + 1,\n        score: prevState.score + points,\n      }));\n    }\n    const { score, assertions } = this.state;\n    const { sendScore } = this.props;\n    updateLocalStorage('score', score);\n    updateLocalStorage('assertions', assertions);\n    sendScore(score);\n  }\n\n  startCronometer() {\n    const ONE_SECOND = 1000; // Milisegundos\n    this.cronometerInterval = setInterval(() => {\n      this.setState((prevState) => ({ timer: prevState.timer - 1 }));\n    }, ONE_SECOND);\n  }\n\n  endTimer() {\n    this.setState({ timer: 'Acabou o tempo!', clicked: true });\n  }\n\n  async loadQuestions() {\n    const { getQuestions } = this.props;\n    await getQuestions();\n    this.setState({ isLoading: false });\n  }\n\n  changeQuestion() {\n    const { currQuestion, score } = this.state;\n    const { history, name, email } = this.props;\n    const QUESTIONS_LENGTH = 4;\n    if (currQuestion === QUESTIONS_LENGTH) {\n      let ranking = readLocalStorage('ranking');\n      if (ranking === null) {\n        ranking = [{\n          name,\n          score,\n          picture: `https://www.gravatar.com/avatar/${md5(email).toString()}`,\n        }];\n        writeLocalStorage('ranking', ranking);\n      } else {\n        ranking.push({\n          name,\n          score,\n          picture: `https://www.gravatar.com/avatar/${md5(email).toString()}`,\n        });\n        writeLocalStorage('ranking', ranking);\n      }\n      return history.push('/trybe-trivia-project/feedback');\n    }\n    this.setState((prevState) => ({\n      currQuestion: prevState.currQuestion + 1,\n      clicked: false,\n    }\n    ));\n    this.setState({ timer: 30 }, () => {\n      clearInterval(this.cronometerInterval);\n      this.startCronometer();\n    });\n  }\n\n  concatAnswers(correct, incorrect) {\n    const answers = [...incorrect, correct];\n    return answers.sort();\n  }\n\n  button() {\n    const { currQuestion } = this.state;\n    const QUESTIONS_LENGTH = 4;\n    if (currQuestion < QUESTIONS_LENGTH) {\n      return (\n        <button\n          type=\"button\"\n          onClick={ this.changeQuestion }\n          data-testid=\"btn-next\"\n        >\n          Proxima\n        </button>\n      );\n    }\n    return (\n      <button\n        type=\"button\"\n        onClick={ this.changeQuestion }\n        data-testid=\"btn-next\"\n      >\n        Feedback\n      </button>\n    );\n  }\n\n  questions() {\n    const { questions } = this.props;\n    const { currQuestion, clicked, timer } = this.state;\n    const options = this.concatAnswers(questions[currQuestion].correct_answer,\n      questions[currQuestion].incorrect_answers);\n    return (\n      <div className=\"jogo\">\n        <div className=\"tempo\">\n          <p>\n            {!clicked && 'Tempo restante: '}\n            {timer}\n          </p>\n        </div>\n        <div className=\"container\">\n          <div className=\"questions\">\n            <div className=\"pergunta\">\n              <h2>{`${currQuestion + 1}ª Pergunta`}</h2>\n            </div>\n            <div className=\"category\">\n              <h2>Categoria</h2>\n              <h4 data-testid=\"question-category\">{questions[currQuestion].category}</h4>\n            </div>\n            <div className=\"text\">\n              <p data-testid=\"question-text\">{questions[currQuestion].question}</p>\n            </div>\n          </div>\n          <div>\n            <div className=\"alternativas\">\n              <div className=\"alt-container\">\n                <h4>Alternativas</h4>\n              </div>\n              {options.map((question, index) => (\n                question === questions[currQuestion].correct_answer ? (\n                  <button\n                    className={ clicked ? 'green-border' : '' }\n                    onClick={ (e) => this.setClass(e) }\n                    type=\"button\"\n                    key={ index }\n                    value={ question }\n                    data-testid=\"correct-answer\"\n                    disabled={ clicked }\n                  >\n                    {question}\n                  </button>\n                ) : (\n                  <button\n                    className={ clicked ? 'red-border' : '' }\n                    onClick={ (e) => this.setClass(e) }\n                    type=\"button\"\n                    key={ index }\n                    value={ question }\n                    data-testid={ `wrong-answers-${index}` }\n                    disabled={ clicked }\n                  >\n                    {question}\n                  </button>\n                )\n              ))}\n              {clicked && this.button()}\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  render() {\n    const { isLoading } = this.state;\n    return (\n      <div>\n        <Header />\n        {isLoading ? <Loading /> : this.questions()}\n        <footer className=\"image-credit\">Background image credit: <a href=\"https://wallpaperforu.com/music-background-80s-neon-vhs-80s-synth-retrowave-synthwave/\">wallpaperforu</a></footer>\n      </div>\n    );\n  }\n}\n\nconst mapDispatchToProps = (dispatch) => ({\n  getQuestions: (token) => dispatch(getQuestionsThunk(token)),\n  sendScore: (score) => dispatch(getScore(score)),\n});\n\nconst mapStateToProps = ({ questions: { questions }, user: { email, name } }) => ({\n  questions,\n  email,\n  name,\n});\n\nJogo.propTypes = {\n  email: PropTypes.string.isRequired,\n  getQuestions: PropTypes.func.isRequired,\n  history: PropTypes.objectOf(PropTypes.any).isRequired,\n  name: PropTypes.string.isRequired,\n  questions: PropTypes.arrayOf(PropTypes.object).isRequired,\n  sendScore: PropTypes.func.isRequired,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Jogo);\n","import React, { Component } from 'react';\n\nclass Settings extends Component {\n  render() {\n    return (\n      <div>\n        <h2 data-testid=\"settings-title\">Configurações</h2>\n      </div>\n    );\n  }\n}\n\nexport default Settings;\n","import PropTypes from 'prop-types';\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { Link } from 'react-router-dom';\nimport Header from '../components/Header';\nimport { readLocalStorage } from '../services/util';\nimport { getScore } from '../actions';\nimport '../style/feedback.css';\n\nclass Feedback extends Component {\n  constructor() {\n    super();\n    this.feedbackMessage = this.feedbackMessage.bind(this);\n    this.zerar = this.zerar.bind(this);\n  }\n\n  feedbackMessage() {\n    const ASSERTION = 3;\n    const player = readLocalStorage('state');\n    if (player.player.assertions < ASSERTION) {\n      return (\n        <>\n          <p data-testid=\"feedback-text\">Podia ser melhor...</p>\n          <p data-testid=\"feedback-total-score\">{ `Pontos Totais: ${player.player.score}` }</p>\n          <p data-testid=\"feedback-total-question\">{ `Acertos: ${player.player.assertions}` }</p>\n        </>\n      );\n    }\n    if (player.player.assertions >= ASSERTION) {\n      return (\n        <>\n          <p data-testid=\"feedback-text\">Mandou bem!</p>\n          <p data-testid=\"feedback-total-score\">{ `Pontos Totais: ${player.player.score}` }</p>\n          <p data-testid=\"feedback-total-question\">{ `Acertos: ${player.player.assertions}` }</p>\n        </>\n      );\n    }\n  }\n\n  zerar() {\n    const { sendScore } = this.props;\n    sendScore(0);\n  }\n\n  render() {\n    return (\n      <div data-testid=\"feedback-text\" className=\"feedback\">\n        <Header />\n        <div className=\"feedback-container\">\n          <div className=\"cont2\">\n            { this.feedbackMessage() }\n            <Link to=\"/trybe-trivia-project/\">\n              <button\n                type=\"button\"\n                data-testid=\"btn-play-again\"\n                onClick={ this.zerar }\n                className=\"jogarNVM\"\n              >\n                Jogar novamente\n              </button>\n            </Link>\n            <Link to=\"/trybe-trivia-project/ranking\">\n              <button\n                type=\"button\"\n                data-testid=\"btn-ranking\"\n              >\n                Ver Ranking\n              </button>\n            </Link>\n          </div>\n        </div>\n        <footer className=\"image-credit\">Background image credit: <a href=\"https://wallpaperforu.com/music-background-80s-neon-vhs-80s-synth-retrowave-synthwave/\">wallpaperforu</a></footer>\n      </div>\n    );\n  }\n}\n\nconst mapDispatchToProps = (dispatch) => ({\n  sendScore: (ponto) => dispatch(getScore(ponto)),\n});\n\nconst mapStateToProps = (state) => ({\n  email: state.user.email,\n});\n\nFeedback.propTypes = {\n  history: PropTypes.shape({\n    push: PropTypes.func,\n  }).isRequired,\n  sendScore: PropTypes.func.isRequired,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Feedback);\n","import React, { Component } from 'react';\nimport { Link } from 'react-router-dom';\nimport { readLocalStorage } from '../services/util';\nimport '../style/ranking.css';\n\nclass Ranking extends Component {\n  render() {\n    const players = readLocalStorage('ranking').sort((a, b) => b.score - a.score);\n    return (\n      <div className=\"ranking\">\n        <div className=\"rank2\">\n          <h2 data-testid=\"ranking-title\">Ranking</h2>\n          <div className=\"ranking-list\">\n            <ol className=\"lista\">\n              {players.map((player, index) => (\n                <li key={ index } className=\"op\">\n                  <p className=\"posi\">{ `${index + 1}º` }</p>\n                  <img\n                    src={ player.picture }\n                    data-testid=\"header-profile-picture\"\n                    alt=\"gravatar\"\n                  />\n                  <p data-testid={ `player-name-${index}` }>{ player.name}</p>\n                  <p data-testid={ `player-score-${index}` }>{player.score}</p>\n                </li>\n              ))}\n            </ol>\n          </div>\n          <Link to=\"/trybe-trivia-project/\">\n            <button type=\"button\" data-testid=\"btn-go-home\">Inicio</button>\n          </Link>\n        </div>\n        <footer className=\"image-credit\">Background image credit: <a href=\"https://wallpaperforu.com/music-background-80s-neon-vhs-80s-synth-retrowave-synthwave/\">wallpaperforu</a></footer>\n      </div>\n    );\n  }\n}\n\nexport default Ranking;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { LOGIN } from '../actions';\n\nconst INITIAL_STATE = {\n  email: '',\n  name: 'nao informado',\n  image: 'https://www.gravatar.com/avatar/00000000000000000000000000000000',\n};\n\nexport default function login(state = INITIAL_STATE, action) {\n  switch (action.type) {\n  case LOGIN:\n    return { ...state, email: action.payload.email, name: action.payload.name };\n  default:\n    return state;\n  }\n}\n","import { GET_TOKEN } from '../actions';\n\nconst INITIAL_STATE = {\n  token: '',\n};\n\nexport default function tokenReducer(state = INITIAL_STATE, action) {\n  switch (action.type) {\n  case GET_TOKEN:\n    return { ...state, token: action.payload.token };\n  default:\n    return state;\n  }\n}\n","import { GET_QUESTIONS } from '../actions';\n\nconst INITIAL_STATE = {\n  questions: [],\n};\n\nexport default function questions(state = INITIAL_STATE, action) {\n  switch (action.type) {\n  case GET_QUESTIONS:\n    return {\n      ...state, questions: action.payload.questions,\n    };\n  default:\n    return state;\n  }\n}\n","import { GET_SCORE } from '../actions';\n\nconst INITIAL_STATE = {\n  score: 0,\n};\n\nexport default function score(state = INITIAL_STATE, action) {\n  switch (action.type) {\n  case GET_SCORE:\n    return {\n      ...state, score: action.payload.score,\n    };\n  default:\n    return state;\n  }\n}\n","import { combineReducers } from 'redux';\nimport login from './login';\nimport tokenReducer from './token';\nimport questions from './questions';\nimport score from './score';\n\nconst rootReducer = combineReducers({\n  user: login,\n  token: tokenReducer,\n  questions,\n  score,\n});\n\nexport default rootReducer;\n","import { createStore, applyMiddleware } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport reduxThunk from 'redux-thunk';\n\nimport rootReducer from '../reducers';\n\nconst store = createStore(\n  rootReducer,\n  composeWithDevTools(applyMiddleware(reduxThunk)),\n);\n\nif (window.Cypress) {\n  window.store = store;\n}\n\nexport default store;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter } from 'react-router-dom';\nimport { Provider } from 'react-redux';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport store from './store';\n\nReactDOM.render(\n  <BrowserRouter>\n    <Provider store={ store }>\n      <App />\n    </Provider>\n  </BrowserRouter>,\n  document.getElementById('root'),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import React from 'react';\nimport { Switch, Route } from 'react-router';\n// import logo from './trivia.png';\nimport './App.css';\nimport Login from './pages/Login';\nimport Jogo from './pages/Jogo';\nimport Settings from './pages/Settings';\nimport Feedback from './pages/Feedback';\nimport Ranking from './pages/Ranking';\n\nexport default function App() {\n  return (\n    <Switch>\n      <Route exact path=\"/trybe-trivia-project/\" component={ Login } />\n      <Route path=\"/trybe-trivia-project/jogo\" component={ Jogo } />\n      <Route path=\"/trybe-trivia-project/settings\" component={ Settings } />\n      <Route path=\"/trybe-trivia-project/feedback\" component={ Feedback } />\n      <Route path=\"/trybe-trivia-project/ranking\" component={ Ranking } />\n    </Switch>\n  );\n}\n"],"sourceRoot":""}